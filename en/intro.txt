Introduction
This book covers a number of topics:
Understanding the structure of ruby.
Gaining a general knowledge of language processing.
Learning the art of reading source code.
Ruby is an object oriented language developed by Yukihira Matsumoto. ruby is the formal implementation of the Ruby language, and it continues to be vigorously developed by the open source community. My number one goal is to make clear the inner structure of ruby. Throughout this book, I will clarify everything about ruby.
Also, knowing how Ruby is pocessed is connected to a general knowledge of language processing. Everything that is needed to implement a language (hash tables, the scanner and parser, evaluation techniques etc.) is included. Since this book is not a textbook, I will not say that it covers each and every field and concept without omission, but it does full explain the portion that covers the framework of language processing. Also, a simple summary of the Ruby language itself is included, so that readers unfamiliar with Ruby will be able to read it.
Well, since that covers the first and second points of my objectives, those are the main topics of this book. However, what this writer wishes to put the most emphasis is the third point, "Learning the art of reading source code." What I would like to say is that this is the background topic. I will explain why I think this is necessary.
It is often said, "To master programming, read others' source code." That is surely the truth. However, I have not seen any book that answers the question, "Well, how should I go about doing that?" There are a number of books that explain the internals of operating system kernels and language processing, but all they do is to lay out the structures, that is, the answers, without telling hwo to find those answers. This is clearly unfair.
Or is it natural that people who can write programs, should be able to read them? Is the truth that reading code is simple, and everyone the world over is able to read code? It's hard to imagine that. Surely, reading programs is about as difficult as writing them.
So, I shall not be explaining well known things just to explain ruby as something that is well known, but rather to give a fresh introduction to the process of analysis. That is not to say that this writer is confident in his abilities in the Ruby language itself, nor that he has a complete understanding of the internal structures of ruby at the time of writing this. Basically, we shall start off from a viewpoint as close as possible to that of the reader, where the internals of ruby are concerned. This book begins from there, and lays out the process of analysis and its results.
Furthernore, I was supervised by Mr. Yukihira Matsumoto himself, the author of ruby, but as this book was being checked and analyzed by him, its "freshness" would have been lost. For that reason, his editing was limited to the final stages. In this way, the accuracy of the contents could be certified without losing the feeling of watching the source code being read.
Speaking frankly, this book is not simple. At least, it is no simpler than the essential difficulty that its objective holds. However, for that very reason, this book is (perhaps) interesting. There is no way that something is interesting if it is beneath one's ability. There is no one who has solved a puzzle who understand the answer the instant he saw it. Mystery novels where you know the culprit halfway through are boring. Solving puzzles that take you to the limits of your ability is how you make knowledge your own. This book is a book that foolishly puts that idealism into practical use. "It's difficult, so it's interesting." I will be happy if even one person thinks that while going through this book.
Target Audience
First of all, knowledge of the Ruby language is not a prerequisite. However, since a knowledge of the Ruby language is, after all, necessary to undertanding of its structure, several chapters explaining it have been inserted as a supplement.
A reasonable level of knowledge of the C language is necessary. It is required to the degree that structures are allocated during run time using malloc(), lists and stacks can be made, and function pointers are used many times.
Also, since I don't give a serious explanation of the basics of object oriented languages, you will probably have difficulty if you don't have some experience using object oriented languages. Bear in mind that many examples of Java and C++ are used throughout this text.
The Organization of This Book
This book is organized into four sections. These are:
Part 1: Objects

Part 2: Syntax Analysis

Part 3: Evaluation

Part 4: The Evaluator Environment

At the start of each section, chapters to supplement fundamental knowledge are inserted, so that those unfamiliar with the structures of language processing or with Ruby will be able to read them.
The organization of the four main sections is laid out below. After the description, a letter in parentheses indicates the level of difficulty. They are C B A in order of increasing difficulty, with the most difficult being S.
Section 1: Objects
Chapter 1

Talks about the basic portion of Ruby that is necessary to read section 1. (C)

Chapter 2

An explanation of the specific internal structure of Ruby objects. (C)

Chapter 3

Talks about the hash table. (C)

Chapter 4

Talks about the Ruby class system. Since this chapter has a lot of abstract talk, it's fine if you just skim it at first.  iA j

Chapter 5

A look at the garbage collector that controls the creation and release of objects. The first in a series of low level talks.  iB j

Chapter 6

An explanation of the implementation of global variables, class variables and constants. (C)

Chapter 7

About the genral framework of Ruby's security funtions. (C)

Section 2: Syntax Analysis
Chapter 8

Talks about nearly all of Ruby's methods in preparation for sections 2 and 3. (C)

Chapter 9

An explanation of the minimum level of knowledge of yacc necessary to read the grammar file.  iB j

Chapter 10

Reading the physical structure and rules of the parser.  iA j

Chapter 11

Searching around the parser's rough spots' lex_state. This book's greatest challenge.  iS j

Chapter 12

Finishing up section 2 and connecting to section 3. (C)

Section 3: Evaluation
Chapter 13

Tells of the fundamental structure of the evaluator. (C)

Chapter 14

Reading the evaluator stack that produces Ruby's main context.  iA j

Chapter 15

Talks about method lookup and startup.  iB j

Chapter 16

Challenging the implementation of the iterator, Ruby's largest peculiarity.  iA j

Chapter 17

Explains the implementation of the eval method.  iB j

Section 4: The Evaluator Environment
Chapter 18

About the run-time loading of Ruby's and C's libraries.  iB j

Chapter 19

The last core chapter tells of the implementation of threads.  iA j

Environment
What this book explains is ruby version 1.7.3 2002-09-12. This version is recorded in archives on the included CD-ROM. Please choose the most convenient of ruby-rhg.tar.gz, ruby-rhg.lzh, or ruby-rhg.zip, all found in the top level directory on it. The contents of each are the same. In addition, you can also obtain them from this book's support site. \footnote{This book's support site: http://i.loveruby.net/ja/rhg/}
Also, before the publication of this book, compilation and fundamental operation was confirmed for the below builds. The details of these build tests are recorded in doc/buildtest.html on the attached CD-ROM. However, even though it may be listed in this table, since it isn't stated that "it operates reliably in this environment", the writer gives no guarantee with regard to ruby's operation.
BeOS 5 Personal Edition/i386
Debian GNU/Linux potato/i386
Debian GNU/Linux woody/i386
Debian GNU/Linux sid/i386
FreeBSD 4.4-RELEASE/Alpha iA local patch from this book is needed. j
FreeBSD 4.5-RELEASE/i386
FreeBSD 4.5-RELEASE/PC98
FreeBSD 5-CURRENT/i386
HP-UX 10.20
HP-UX 11.00 (32bit mode)
HP-UX 11.11 (32bit mode)
Mac OS X 10.2
NetBSD 1.6F/i386
OpenBSD 3.1
Plamo Linux 2.0/i386
Linux for PlayStation2 Release 1.0
Redhat Linux 7.3/i386
Solaris 2.6/Sparc
Solaris 8/Sparc
UX/4800
Vine Linux 2.1.5
Vine Linux 2.5
VineSeed
Windows 98SE (Cygwin, MinGW+Cygwin, MinGW+MSYS)
Windows Me (Borland C++ Compiler 5.5, Cygwin, MinGW+Cygwin, MinGW+MSYS, Visual C++ 6)
Windows NT 4.0 (Cygwin, MinGW+Cygwin)
Windows 2000 (Borland C++ Compiler 5.5, Visual C++ 6, Visual C++.NET)
Windows XP (Visual C++.NET, MinGW+Cygwin)
These tests were not done by the writer alone. These build tests were done with the cooperation of the following people. I have recorded their names here as a token of my gratitude.
Tietew

kjana

nyasu

sakazuki

Masahiro Satou

Kenichi Namura

Kyuu Mori

Yuuya Katou

Takehiro Kubo

Kentarou Gotou

Tomoyuki Shimomura

Masaki Suketa

Koji Arai

Kazuhiro Nishiyama

Nobunari Kawaji

Tetsuya Watanabe

Hisakuni Fujimoto

However, I bear full responsibility for this text. Please refrain from contacting any of the above people. If you find any errors, please contact me at aamine@loveruby.net}.
Website
This book's home page is http://i.loveruby.net/ja/rhg/. This is where I will place any information about related programs, additional documentation, and most important of all, any errata and addenda. Once again, I plan on presenting the first few chapters here at the time of publication. I am considering to continue presenting the chapters sequentially on this website, until finally the entire book is available.
AcknowledgementsŽÓŽ«
First and foremost, let me thank Yukihiro Matsumoto. For creating Ruby, for releasing it as open source software, for not just wholeheartedly consenting to the publication of a book analyzing ruby, but also shouldering the responsibility of supervising it, and even going so far as to interpret for me in Florida, there are so many things I wish to thank him for that I could not possibly thank him enough. As a substitute, I present this book to him.
Next, I would like to thank arton, who was the first to suggest the publication of this book. arton's words have always had a strong influence on me. It was thanks to that that I couldn't help but want a .NET machine, wasn't it?
Koji Arai, the head of the document group of the Ruby world, did so much research for me that you would have thought the he was working as its editor in chief, Thank you very much.
While I was still in the midst of writing, I received numerous comments, had numerous mistakes pointed out, and received numerous suggestions for the book's organization. Tietew, Yuya, Kawaji, Gotoken, Tamura, Funaba, Morikyuu, Ishizuka, Shimomura, Kubo, Sukeda, Nisiyama, Fujimoto, Yanagawa, and my apologies to any whom I have inadvertantly omitted. I thank all of these people for their cooperation.
And finally, my thanks to Ootsuka, Haruta and Konkou, who, despite the deadline having been passed four times, did not shrink from an extra 200 pages of manuscript, and carried on to the very end.
I can not list here the names of all the people who influenced this book, but it could not have been published without all of their help. I set aside this place to thank all of them. Truly, thank you very much.

Please send opinions, impressions, and errata and addenda to  Â–Ø•ô˜Y <aamine@loveruby.net>
The Japanese edition of the "Ruby Hacking Guide" may be purchased through Impress Direct. (Go to publisher's page.)
Copyright (c) 2002-2004 Minero Aoki, All rights reserved.
